function [Y,Xf,Af] = myNeuralNetworkFunction_201602201813(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 20-Feb-2017 18:13:12.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 25xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
IW1_1 = [-42.145211538461545 0.31716057358368077 1777.9514037692306 -42.051051282051276 0.00027275641025630986;-48.501641959798995 0.38731585997106643 2355.3215965067839 -48.295344221105495 0.00069497487437127602;-52.228365909090918 2.5120682648540558 2745.9633029840902 -52.790545454545459 -0.0030079545454600905;-63.710870370370372 1.6960792432447245 4070.2919905888893 -64.730074074074068 -0.12916666666667445;-64.772748148148125 0.17157097864858534 4196.0308548055555 -64.820412037037059 -0.0010708333333343048;-50.128174519230747 0.30766672696543629 2514.8084188052885 -49.972942307692307 -0.00050216346154286862;-55.151669696969705 0.36385953324517789 3043.7384046212128 -55.308166666666665 0.0009053030303017548;-60.361886708860759 0.29212068802877017 3645.5246054373424 -60.412085443037967 -0.0073789556962017651;-65.423363414634139 0.61459594587575672 4282.6324231048784 -65.657109756097569 -0.092729878048783451;-66.102571721311477 0.17704088430995144 4370.1937123422122 -66.154446721311487 -0.00053135245902054945;-51.120663461538449 0.24571081486803736 2615.0384590311546 -50.971419230769243 0.0019840384615355394;-53.557745918367353 0.46430093331166578 2871.6809915295917 -53.613877551020408 -0.0014556122448966878;-58.580488805970148 1.1757581141835791 3439.4383585574633 -58.934992537313448 -0.0011970149253761244;-64.475223437499992 0.097359904280785892 4157.3668143484365 -64.512992187499989 0.00061223958333058229;-66.578603424657544 0.354334992518687 4433.8762043047946 -66.664671232876714 -0.055239726027403811;-54.382718852459 0.51297117598162489 2961.3006512811476 -54.495254098360654 0.00064795081967098538;-57.646029508196712 1.2305462047450413 3331.6154888836072 -58.034106557377051 -0.00077049180328032897;-61.93686000000001 6.4941122406620355 3880.3948619900002 -63.360550000000003 -0.46556250000000471;-67.320151243781083 0.10301435268502593 4532.2549208447772 -67.338121890547242 -0.019248258706463843;-68.095430327868868 0.062621639115989405 4637.0568266778691 -68.094581967213117 -0.47505081967213014;-55.968186363636356 0.69837262827687485 3137.4928843136368 -56.041125000000001 0.0045517045454570781;-56.818839423076916 0.41123735135239414 3231.0400054548081 -56.880711538461547 0.0017545673076897136;-59.952363333333338 0.65829118074078985 3598.8801108941657 -60.159595833333334 -0.0038983333333341363;-69.274591666666652 0.17856917574211406 4799.1377284319442 -69.278840277777761 -0.0035149305555560359;-70.469844155844157 0.13616061032716295 4966.1143070636381 -70.483409090909106 -0.01597889610389807];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    % no processing
    
    % Layer 1
    z1 = negdist_apply(IW1_1,X{1,ts});
    a1 = compet_apply(z1);
    
    % Output 1
    Y{1,ts} = a1;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(1,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Negative Distance Weight Function
function z = negdist_apply(w,p)
S = size(w,1);
Q = size(p,2);
z = zeros(S,Q);
if (Q<S)
    p = p';
    for q=1:Q
        z(:,q) = sum(bsxfun(@minus,w,p(q,:)).^2,2);
    end
else
    w = w';
    for i=1:S
        z(i,:) = sum(bsxfun(@minus,w(:,i),p).^2,1);
    end
end
z = -sqrt(z);
end

% Competitive Transfer Function
function a = compet_apply(n)
if isempty(n)
    a = n;
else
    [S,Q] = size(n);
    nanInd = any(isnan(n),1);
    
    a = zeros(S,Q);
    [~,rows] = max(n,[],1);
    onesInd = rows + S*(0:(Q-1));
    a(onesInd) = 1;
    
    a(:,nanInd) = NaN;
end
end
