%% Import data from text file.
% Script for importing data from the following text file:
%
%    D:\Connectavo\Dropbox\KBA\Albrecht Szeitszam - 60905500_M_2015.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/07/18 15:24:08

%% Initialize variables.
filename = 'D:\Connectavo\Dropbox\KBA\Albrecht Szeitszam - 60905500_M_2015.txt';
delimiter = ';';

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,5,6,7,14,15,16,17,18,20,21,22,23,24,25,26,27]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,5,6,7,14,15,16,17,18,20,21,22,23,24,25,26,27]);
rawCellColumns = raw(:, [3,4,8,9,10,11,12,13,19,28]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
MaschineNr = cell2mat(rawNumericColumns(:, 1));
Sektion = cell2mat(rawNumericColumns(:, 2));
AlarmID = rawCellColumns(:, 1);
TextID = rawCellColumns(:, 2);
Klasse = cell2mat(rawNumericColumns(:, 3));
InProduktion = cell2mat(rawNumericColumns(:, 4));
Gekuppelt = cell2mat(rawNumericColumns(:, 5));
Ort = rawCellColumns(:, 3);
Text = rawCellColumns(:, 4);
Kommentar = rawCellColumns(:, 5);
Gekommen = rawCellColumns(:, 6);
Gegangen = rawCellColumns(:, 7);
Quittiert = rawCellColumns(:, 8);
Confirmed = cell2mat(rawNumericColumns(:, 6));
Istwert1 = cell2mat(rawNumericColumns(:, 7));
Istwert2 = cell2mat(rawNumericColumns(:, 8));
Istwert3 = cell2mat(rawNumericColumns(:, 9));
Istwert4 = cell2mat(rawNumericColumns(:, 10));
BetrKennzeichen = rawCellColumns(:, 9);
Zusatzinfo1 = cell2mat(rawNumericColumns(:, 11));
Zusatzinfo2 = cell2mat(rawNumericColumns(:, 12));
Zusatzinfo3 = cell2mat(rawNumericColumns(:, 13));
Zusatzinfo4 = cell2mat(rawNumericColumns(:, 14));
Zusatzinfo5 = cell2mat(rawNumericColumns(:, 15));
Zusatzinfo6 = cell2mat(rawNumericColumns(:, 16));
Zusatzinfo7 = cell2mat(rawNumericColumns(:, 17));
Zusatzinfo8 = cell2mat(rawNumericColumns(:, 18));
VarName28 = rawCellColumns(:, 10);


%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;


%% Extracting Error aka "Fehler" from the "Text" data column of the dataset

char Fehler;
char Fehler_total_unique;
Fehler_Location = [];
count=0;

for i=1:1:length(Text)
check = findstr(char(Text(i,:)),'Fehler');
if (check)
    count=1+count;
    check=0;
    Fehler_Location(count) = i;
%     Fehler (count,:) = Text(i,:);
end
end

Fehler = Text(Fehler_Location,:);
Fehler_total_unique = unique(Text(Fehler_Location,:));

Fehler_plot = zeros(length(Text),1);
Fehler_plot(Fehler_Location) = 1;

%% Indexing all of the non numeric data coulmns in unique numbers

AlarmID_I = zeros(length(AlarmID),1);
AlarmID_U = unique(AlarmID);

for i=1:1:length(AlarmID_U)%100
    for j=1:1:length(AlarmID)%14125
        if(strcmp(char(AlarmID(j,:)),char(AlarmID_U(i,:))))
              AlarmID_I(j) = i;
            count = count+1
        end
    end
end


BetrKennzeichen_I = zeros(length(BetrKennzeichen),1);
BetrKennzeichen_U = unique(BetrKennzeichen);

for i=1:1:length(BetrKennzeichen_U)%100
    for j=1:1:length(BetrKennzeichen)%14125
        if(strcmp(char(BetrKennzeichen(j,:)),char(BetrKennzeichen_U(i,:))))
            BetrKennzeichen_I(j) = i;
            count = count+1
        end
    end
end

Kommentar_I = zeros(length(Kommentar),1);
Kommentar_U = unique(Kommentar);

for i=1:1:length(Kommentar_U)%100
    for j=1:1:length(Kommentar)%14125
        if(strcmp(char(Kommentar(j,:)),char(Kommentar_U(i,:))))
            Kommentar_I(j) = i;
            count = count+1
        end
    end
end

Ort_I = zeros(length(Ort),1);
Ort_U = unique(Ort);

for i=1:1:length(Ort_U)%100
    for j=1:1:length(Ort)%14125
        if(strcmp(char(Ort(j,:)),char(Ort_U(i,:))))
            Ort_I(j) = i;
            count = count+1
        end
    end
end

% Text_I = zeros(length(Text),1);
% Text_U = unique(Text);
% 
% for i=1:1:length(Text_U)%100
%     for j=1:1:length(Text)%14125
%         if(strcmp(char(Text(j,:)),char(Text_U(i,:))))
%             Text_I(j) = i;
%             count = count+1
%         end
%     end
% end

TextID_I = zeros(length(TextID),1);
TextID_U = unique(TextID);

for i=1:1:length(TextID_U)%100
    for j=1:1:length(TextID)%14125
        if(strcmp(char(TextID(j,:)),char(TextID_U(i,:))))
            TextID_I(j) = i;
            count = count+1
        end
    end
end

%%making table for Machine Learning application
CL_ML_data_table = table(Fehler_plot,MaschineNr,Sektion,AlarmID_I,TextID_I,Klasse,InProduktion,Gekuppelt,Ort_I,Kommentar_I,Confirmed,Istwert1,Istwert2,Istwert3,Istwert4,BetrKennzeichen_I,Zusatzinfo1,Zusatzinfo2,Zusatzinfo3,Zusatzinfo4,Zusatzinfo5,Zusatzinfo6,Zusatzinfo7,Zusatzinfo8);

datasetTable = CL_ML_data_table;

% function [trainedClassifier, validationAccuracy] = trainClassifier(datasetTable)
% Extract predictors and response
predictorNames = {'MaschineNr', 'Sektion', 'AlarmID_I', 'TextID_I', 'Klasse', 'InProduktion', 'Gekuppelt', 'Ort_I', 'Kommentar_I', 'Confirmed', 'Istwert1', 'Istwert2', 'Istwert3', 'Istwert4', 'BetrKennzeichen_I', 'Zusatzinfo1', 'Zusatzinfo2', 'Zusatzinfo3', 'Zusatzinfo4', 'Zusatzinfo5', 'Zusatzinfo6', 'Zusatzinfo7', 'Zusatzinfo8'};
predictors = datasetTable(:,predictorNames);
predictors = table2array(varfun(@double, predictors));
response = datasetTable.Fehler_plot;
% Train a classifier
trainedClassifier = fitctree(predictors, response, 'PredictorNames', {'MaschineNr' 'Sektion' 'AlarmID_I' 'TextID_I' 'Klasse' 'InProduktion' 'Gekuppelt' 'Ort_I' 'Kommentar_I' 'Confirmed' 'Istwert1' 'Istwert2' 'Istwert3' 'Istwert4' 'BetrKennzeichen_I' 'Zusatzinfo1' 'Zusatzinfo2' 'Zusatzinfo3' 'Zusatzinfo4' 'Zusatzinfo5' 'Zusatzinfo6' 'Zusatzinfo7' 'Zusatzinfo8'}, 'ResponseName', 'Fehler_plot', 'ClassNames', [0 1], 'SplitCriterion', 'gdi', 'MaxNumSplits', 100, 'Surrogate', 'off');

% Perform cross-validation
partitionedModel = crossval(trainedClassifier, 'KFold', 10);

% Compute validation accuracy
validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');

%% Uncomment this section to compute validation predictions and scores:
% Compute validation predictions and scores
[validationPredictions, validationScores] = kfoldPredict(partitionedModel);