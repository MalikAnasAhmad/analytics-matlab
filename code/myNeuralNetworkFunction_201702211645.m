function [Y,Xf,Af] = myNeuralNetworkFunction_201702211645(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 21-Feb-2017 16:42:46.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 9xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
IW1_1 = [-42.17503312500002 0.4410526831506002 1781.2269652406253 -42.03874375000003 0.00032999999999967495;-54.154334482758586 0.6459679432401082 2937.8983535810353 -54.330701149425288 -0.00034396551724197614;-67.645573323615153 0.096778240439591018 4576.2946735077257 -67.658606413994164 -0.21434424198250485;-49.690246180555555 0.30667921077259808 2472.5524862253474 -49.544090277777777 0.00083969907407192401;-64.517630539772739 0.37072500166058719 4164.6951005771307 -64.682546875000014 -0.028590625000002437;-69.971332269503563 0.15595596652790772 4896.4318166287239 -69.98005319148939 -0.010630673758866531;-57.214871020408154 0.7421927464350011 3279.1707072273462 -57.418816326530631 0.0011760204081610796;-60.127383959044359 0.71779049000247708 3620.3399893590436 -60.268228668941944 -0.012254778156996623;-66.16127692307694 0.28127966738167387 4378.4112500177889 -66.249822115384617 -0.019334014423081344];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    % no processing
    
    % Layer 1
    z1 = negdist_apply(IW1_1,X{1,ts});
    a1 = compet_apply(z1);
    
    % Output 1
    Y{1,ts} = a1;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(1,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Negative Distance Weight Function
function z = negdist_apply(w,p)
S = size(w,1);
Q = size(p,2);
z = zeros(S,Q);
if (Q<S)
    p = p';
    for q=1:Q
        z(:,q) = sum(bsxfun(@minus,w,p(q,:)).^2,2);
    end
else
    w = w';
    for i=1:S
        z(i,:) = sum(bsxfun(@minus,w(:,i),p).^2,1);
    end
end
z = -sqrt(z);
end

% Competitive Transfer Function
function a = compet_apply(n)
if isempty(n)
    a = n;
else
    [S,Q] = size(n);
    nanInd = any(isnan(n),1);
    
    a = zeros(S,Q);
    [~,rows] = max(n,[],1);
    onesInd = rows + S*(0:(Q-1));
    a(onesInd) = 1;
    
    a(:,nanInd) = NaN;
end
end
