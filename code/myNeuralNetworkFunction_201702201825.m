function [Y,Xf,Af] = myNeuralNetworkFunction_201702201825(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 20-Feb-2017 18:25:15.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 4xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
IW1_1 = [-55.529560404624277 0.63859618607249158 3090.0091929473988 -55.665289017341046 0.00087507225433413184;-66.633509108716936 0.19948564819160661 4444.2012279719893 -66.692560235063681 -0.079049045053869921;-48.559784502923975 0.32796011172364764 2368.8715560094538 -48.419894736842096 0.00070165692007610552;-59.818629888268148 0.75946093018273708 3584.1474075240226 -60.024885474860319 -0.014646857541899858];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    % no processing
    
    % Layer 1
    z1 = negdist_apply(IW1_1,X{1,ts});
    a1 = compet_apply(z1);
    
    % Output 1
    Y{1,ts} = a1;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(1,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Negative Distance Weight Function
function z = negdist_apply(w,p)
S = size(w,1);
Q = size(p,2);
z = zeros(S,Q);
if (Q<S)
    p = p';
    for q=1:Q
        z(:,q) = sum(bsxfun(@minus,w,p(q,:)).^2,2);
    end
else
    w = w';
    for i=1:S
        z(i,:) = sum(bsxfun(@minus,w(:,i),p).^2,1);
    end
end
z = -sqrt(z);
end

% Competitive Transfer Function
function a = compet_apply(n)
if isempty(n)
    a = n;
else
    [S,Q] = size(n);
    nanInd = any(isnan(n),1);
    
    a = zeros(S,Q);
    [~,rows] = max(n,[],1);
    onesInd = rows + S*(0:(Q-1));
    a(onesInd) = 1;
    
    a(:,nanInd) = NaN;
end
end
